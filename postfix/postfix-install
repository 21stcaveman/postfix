#!/bin/sh

# To view the formatted manual page of this file, type:
#	POSTFIXSOURCE/mantools/srctoman - postfix-install | nroff -man

#++
# NAME
#	postfix-install 1
# SUMMARY
#	Postfix installation procedure
# SYNOPSIS
#	sh postfix-install [-non-interactive] [name=value] ...
# DESCRIPTION
#	The postfix-install script is to be run from the top-level
#	Postfix source directory. It implements the following operations:
# .IP o
#	Install or upgrade Postfix from source code. This mode requires
#	super-user privileges.
# .IP o
#	Build a package that can be distributed to other systems, in order
#	to install or upgrade Postfix elsewhere. This requires no super-user
#	privileges. To complete the installation after unpacking the
#	package, execute as super-user the post-install script in the Postfix
#	configuration directory.
# .PP
#	The postfix-install script is controlled by installation parameters.
#	Specific parameters are described at the end of this document.
#
#	By default, postfix-install asks the user for installation
#	parameter settings. Settings are stored in the installed
#	main.cf file. These settings are used as site-specific defaults
#	when the postfix-install script is run later.
#
#	The names of Postfix files and directories, as well as their
#	ownerships and permissions, are stored in the postfix-files file
#	in the Postfix configuration directory. This information is used
#	by the post-install script (also in the configuration directory)
#	for creating missing queue directories when Postfix is started,
#	and for setting correct ownership and permissions when Postfix
#	is installed from a pre-built package or from source code.
#
#	Arguments
# .IP -non-interactive
#	Do not ask the user for parameter settings. This is useful for
#	upgrading an existing Postfix installation from source code,
#	or for preparing a pre-built package for distribution to other
#	systems. Installation parameters must be specified via one of
#	the non-interactive methods described below.
# INSTALLATION PARAMETER INPUT METHODS
# .ad
# .fi
#	Parameter settings can be specified through a variety of
#	mechanisms.  In order of decreasing precedence these are:
# .IP "interactive mode"
#	By default, postfix-install will ask the user for
#	installation parameter settings. These settings have the highest
#	precedence.
# .IP "command line"
#	Parameter settings can be given as name=value arguments on
#	the postfix-install command line.
# .IP "process environment"
#	Parameter settings can be given as name=value environment
#	variables. Environment parameters can also be specified on the
#	make(1) command line as "make install name=value ...".
# .IP "installed configuration files"
#	If a parameter is not specified via the command line or via the
#	process environment, postfix-install will attempt to extract its
#	value from an already installed Postfix main.cf configuration file.
# .IP "built-in defaults"
#	These settings have the lowest precedence.
# INSTALLATION PARAMETER DESCRIPTION
# .ad
# .fi
#	The description of installation parameters and their built-in
#	default settings is as follows:
# .IP install_root
#	Prefix that is prepended to the pathnames of installed files.
#	This is useful for creating a pre-built package for distribution to
#	other systems. The built-in default is "/", the local root directory.
# .IP tempdir
#	Directory for scratch files while installing Postfix.
#	You must must have write permission in this directory.
#	The built-in default directory name is the current directory.
# .IP config_directory
#	Destination directory for Postfix configuration files. The
#	built-in default directory name is /etc/postfix.
# .IP daemon_directory
#	Destination directory for Postfix daemon programs. This directory
#	should not be in the command search path of any users. The built-in
#	default directory name is /usr/libexec/postfix.
# .IP command_directory
#	Destination directory for Postfix administrative commands. This
#	directory should be in the command search path of adminstrative users.
#	The built-in default directory name is system dependent.
# .IP queue_directory
#	The destination directory for Postfix queues. The built-in default
#	directory name is /var/spool/postfix.
# .IP sendmail_path
#	The full destination pathname for the Postfix sendmail command.
#	This is the Sendmail-compatible mail posting interface.
#	The built-in default pathname is system dependent.
# .IP newaliases_path
#	The full destination pathname for the Postfix newaliases command.
#	This is the Sendmail-compatible command to build alias databases
#	for the Postfix local delivery agent.
#	The built-in default pathname is system dependent.
# .IP mailq_path
#	The full destination pathname for the Postfix mailq command.
#	This is the Sendmail-compatible command to list the mail queue.
#	The built-in default pathname is system dependent.
# .IP mail_owner
#	The owner of the Postfix queue. Its numerical user ID and group ID
#	must not be used by any other accounts on the system. The built-in
#	default account name is postfix.
# .IP setgid_group
#	The group for mail submission and for queue management commands.
#	Its numerical group ID must not be used by any other accounts on the
#	system, not even by the mail_owner account. The built-in default group
#	name is postdrop.
# .IP manpage_path
#	The destination directory for the Postfix on-line manual pages.
# SEE ALSO
#	post-install(1) post-installation procedure
# FILES
#	$config_directory/main.cf, Postfix installation configuration.
#	$config_directory/postfix-files, permissions and ownerships.
#	This file is created by postfix-install.
# LICENSE
# .ad
# .fi
#       The Secure Mailer license must be distributed with this software.
# AUTHOR(S)
#       Wietse Venema
#       IBM T.J. Watson Research
#       P.O. Box 704
#       Yorktown Heights, NY 10598, USA
#--

# Initialize.
# By now, shells must have functions. Ultrix users must use sh5 or lose.

umask 022
PATH=/bin:/usr/bin:/usr/sbin:/usr/etc:/sbin:/etc:/usr/contrib/bin:/usr/gnu/bin:/usr/ucb:/usr/bsd
SHELL=/bin/sh
IFS=" 	
"

# Process command-line options and parameter settings. Work around
# brain damaged shells. "name=value command" should not make the
# name=value setting permanent.

for arg
do
    case $arg in
             *=*) SAVED_IFS="$IFS"; IFS= eval $arg; IFS="$SAVED_IFS";;
-non-interactive) non_interactive=1;;
               *) echo Error: usage: $0 [-non-interactive] name=value ... 1>&2
		  exit 1;;
    esac
    shift
done

# Sanity checks.

test -z "$non_interactive" -a ! -t 0 && {
    echo Error: for non-interactive use, run: \"$0 -non-interactive\" 1>&2
    exit 1
}

test -x bin/postconf || {
    echo Error: no bin/postconf file. Did you forget to run \"make\"? 1>&2
    exit 1
}

case `uname -s` in
HP-UX*) FMT=cat;;
     *) FMT=fmt;;
esac

# Disclaimer.

test -z "$non_interactive" && cat <<EOF | ${FMT}

    Warning: if you use this script to install Postfix locally,
    this script will replace existing sendmail or Postfix programs.
    Make backups if you want to be able to recover.

    Before installing files, this script prompts you for some
    definitions.  Most definitions will be remembered, so you have
    to specify them only once. All definitions should have a
    reasonable default value.
EOF

# The following shell functions replace files/symlinks while minimizing
# the time that a file does not exist, and avoid copying over files
# in order to not disturb running programs. That is certainly desirable
# when upgrading Postfix on a live machine. It also avoids surprises
# when building a Postfix package for distribution to other systems.

censored_ls() {
    ls "$@" | egrep -v '^\.|/\.|CVS|RCS|SCCS'
}

compare_or_replace() {
    (cmp $2 $3 >/dev/null 2>&1 && echo Skipping $3...) || {
	echo Updating $3...
	rm -f $tempdir/junk || exit 1
	cp $2 $tempdir/junk || exit 1
	test -z "$4" || chgrp $4 $tempdir/junk || exit 1
	chmod $1 $tempdir/junk || exit 1
	mv -f $tempdir/junk $3 || exit 1
	test -z "$4" || chgrp $4 $3 || exit 1
	chmod $1 $3 || exit 1
    }
}

compare_or_symlink() {
    (cmp $1 $2 >/dev/null 2>&1 && echo Skipping $2...) || {
	echo Updating $2...
	rm -f $tempdir/junk || exit 1
	dest=`echo $1 | sed '
	    s;^'$install_root';;
	    s;/\./;/;g
	    s;//*;/;g
	    s;^/;;
	'`
	link=`echo $2 | sed '
	    s;^'$install_root';;
	    s;/\./;/;g
	    s;//*;/;g
	    s;^/;;
	    s;/[^/]*$;/;
	    s;[^/]*/;../;g
	    s;$;'$dest';
	'`
	ln -s $link $tempdir/junk || exit 1
	mv -f $tempdir/junk $2 || {
	    echo Error: your mv command is unable to rename symlinks. 1>&2
	    echo If you run Linux, upgrade to GNU fileutils-4.0 or better, 1>&2
	    echo or choose a tempdir that is in the same file system as $2. 1>&2
	    exit 1
	}
    }
}

compare_or_move() {
    (cmp $2 $3 >/dev/null 2>&1 && echo Skipping $3...) || {
	echo Updating $3...
	mv -f $2 $3 || exit 1
	chmod $1 $3 || exit 1
    }
}

# How to supress newlines in echo.

case `echo -n` in
"") n=-n; c=;;
 *) n=; c='\c';;
esac

# Prompts.

install_root_prompt="the prefix for installed file names. This is
useful if you are building ready-to-install packages for distribution
to other machines."

tempdir_prompt="a directory for scratch files while installing
Postfix.  You must must have write permission in this directory."

config_directory_prompt="the destination directory for installed
Postfix configuration files."

daemon_directory_prompt="the destination directory for installed
Postfix daemon programs.  This directory should not be in the
command search path of any users."

command_directory_prompt="the destination directory for installed
Postfix administrative commands.  This directory should be in the
command search path of adminstrative users."

queue_directory_prompt="the destination directory for Postfix
queues."

sendmail_path_prompt="the full destination pathname for the installed
Postfix sendmail command. This is the Sendmail-compatible mail
posting interface."

newaliases_path_prompt="the full destination pathname for the
installed Postfix newaliases command.  This is the Sendmail-compatible
command to build alias databases for the Postfix local delivery
agent."

mailq_path_prompt="the full destination pathname for the installed
Postfix mailq command.  This is the Sendmail-compatible mail queue
listing command."

mail_owner_prompt="the owner of the Postfix queue. Specify an
account with numerical user ID and group ID values that are not
used by any other accounts on the system."

setgid_group_prompt="the group for mail submission and for queue
management commands.  Specify a group name with a numerical group
ID that is not shared with other accounts, not even with the Postfix
mail_owner account."

manpage_path_prompt="the destination directory for the Postfix on-line
manual pages."

# Default settings, just to get started.

: ${install_root=/}
: ${tempdir=`pwd`}
: ${config_directory=`bin/postconf -h -d config_directory`}

# Find out the location of installed configuration files.

test -z "$non_interactive" && for name in install_root tempdir config_directory
do
    while :
    do
	echo
	eval echo Please specify \$${name}_prompt | ${FMT}
	eval echo \$n "$name: [\$$name]\  \$c"
	read ans
	case $ans in
	"") break;;
	 *) case $ans in
	    /*) eval $name=\$ans; break;;
	     *) echo; echo Error: $name should be an absolute path name. 1>&2;;
	    esac;;
	esac
    done
done

# In case some systems special-case pathnames beginning with //.

case $install_root in
/) install_root=
esac

CONFIG_DIRECTORY=$install_root$config_directory

# If a parameter is not set via the command line or environment,
# try to use settings from installed configuration files.

# Extract parameter settings from the installed main.cf file.

test -f $CONFIG_DIRECTORY/main.cf && {
    for name in daemon_directory command_directory queue_directory mail_owner \
	setgid_group sendmail_path newaliases_path mailq_path manpage_path
    do
	eval : \${$name=\`bin/postconf -c $CONFIG_DIRECTORY -h $name\`} || kill $$
    done
}

# Grandfathering: some parameters used to be stored in install.cf.
# They are now part of main.cf. Some names have changed as well.

grep setgid_group $CONFIG_DIRECTORY/main.cf >/dev/null 2>&1 || {
    test -f $CONFIG_DIRECTORY/install.cf  && {
	for name in sendmail_path newaliases_path mailq_path setgid manpages
	do
	    eval : \${$name=`. $CONFIG_DIRECTORY/install.cf; echo \$name`}
	done
	: ${setgid_group=$setgid}
	: ${manpage_path=$manpages}
    }
}

# Find out what parameters were not specified via command line,
# via environment, or via installed configuration files.

missing=
for name in daemon_directory command_directory queue_directory mail_owner \
    setgid_group sendmail_path newaliases_path mailq_path manpage_path
do
    eval test -n \"\$$name\" || missing="$missing $name"
done

# In the case of non-interactive installation, all parameters must
# be specified at this point.

test -n "$non_interactive" -a -n "$missing" && {
    cat <<EOF | ${FMT} 1>&2
Error: non-interactive installation requires that all parameters
be specified ahead of time.

- Either the parameters must be given in the $CONFIG_DIRECTORY/main.cf
file from a recent Postfix installation,

- Or the parameters need to be specified as name=value arguments
on the $0 command line,

- Or the parameters need to be specified through the process
environment.

The following parameters were missing:

    $missing

For interactive installation use "make install".
EOF
    exit 1
}

# Use built-in defaults for parameters that weren't set via the
# environment, via the command line, or via installed configuration
# files.

for name in $missing
do
    eval : \${$name=\`bin/postconf -d -h $name\`} || kill $$
done

# Override default settings.

test -z "$non_interactive" && for name in daemon_directory command_directory \
    queue_directory sendmail_path newaliases_path mailq_path mail_owner \
    setgid_group manpage_path
do
    while :
    do
	echo
	eval echo Please specify \$${name}_prompt | ${FMT}
	eval echo \$n "$name: [\$$name]\  \$c"
	read ans
	case $ans in
	"") break;;
	 *) eval $name=\$ans; break;;
	esac
    done
done

# Sanity checks

case $manpage_path in
 no) echo Error: manpage_path no longer accepts \"no\" values. 1>&2
     echo Re-run this script with \"make install\". 1>&2; exit 1;;
esac

case $setgid_group in
 no) echo Error: setgid_group no longer accepts \"no\" values. 1>&2
     echo Re-run this script with \"make install\". 1>&2; exit 1;;
esac

for path in $daemon_directory $command_directory \
    $queue_directory $sendmail_path $newaliases_path $mailq_path $manpage_path
do
   case $path in
   /*) ;;
    *) echo Error: $path should be an absolute path name. 1>&2; exit 1;;
   esac
done

test -d $tempdir || mkdir -p $tempdir || exit 1

( rm -f $tempdir/junk && touch $tempdir/junk ) || {
    echo Error: you have no write permission to $tempdir. 1>&2
    echo Specify an alternative directory for scratch files. 1>&2
    exit 1
}

rm -f $tempdir/junk

# Avoid clumsiness.

DAEMON_DIRECTORY=$install_root$daemon_directory
COMMAND_DIRECTORY=$install_root$command_directory
QUEUE_DIRECTORY=$install_root$queue_directory
SENDMAIL_PATH=$install_root$sendmail_path
NEWALIASES_PATH=$install_root$newaliases_path
MAILQ_PATH=$install_root$mailq_path
MANPAGE_PATH=$install_root$manpage_path

# Create any missing directories.

test -d $CONFIG_DIRECTORY || mkdir -p $CONFIG_DIRECTORY || exit 1
test -d $DAEMON_DIRECTORY || mkdir -p $DAEMON_DIRECTORY || exit 1
test -d $COMMAND_DIRECTORY || mkdir -p $COMMAND_DIRECTORY || exit 1
test -d $QUEUE_DIRECTORY || mkdir -p $QUEUE_DIRECTORY || exit 1
for path in $SENDMAIL_PATH $NEWALIASES_PATH $MAILQ_PATH
do
    dir=`echo $path|sed -e 's/[/][/]*[^/]*$//' -e 's/^$/\//'`
    test -d $dir || mkdir -p $dir || exit 1
done

# Install files. Keep a record of pathnames, ownerships and permissions
# so that "postfix check" and "post-install" can do the right thing.

# If building a package for distribution to other systems, don't
# enable execute permission.

if [ -n "$install_root" ]
then
    EXE=644
else
    EXE=755
fi

cat <<EOF >$CONFIG_DIRECTORY/postfix-files || exit 1
#
# Do not edit. This file was generated by $0.
#
# Do not list \$command_directory here, or it will be blown
# away by a future Postfix uninstallation procedure.
#
# File format:
#	name:type:owner:group:permission:upgrade:create
#	No group means don't change group ownership.
#
# File flags:
#	No flag means the flag is not active.
#	update=update owner/group/mode (upgrade mode).
#	create=create missing directory.
#
\$config_directory:d:root::755:u
\$daemon_directory:d:root::755:u
\$queue_directory:d:root::755:u:c
EOF

# Generate instructions only for queue subdirectories.

for dir in active bounce corrupt defer deferred flush incoming private saved
do
    echo \$queue_directory/$dir:d:\$mail_owner::700:u:c \
	>>$CONFIG_DIRECTORY/postfix-files || exit 1
done

echo \$queue_directory/maildrop:d:\$mail_owner:\$setgid_group:730:u:c \
    >>$CONFIG_DIRECTORY/postfix-files || exit 1

echo \$queue_directory/public:d:\$mail_owner:\$setgid_group:710:u:c \
    >>$CONFIG_DIRECTORY/postfix-files || exit 1

echo \$queue_directory/pid:d:root::755:u:c \
    >>$CONFIG_DIRECTORY/postfix-files || exit 1

# Install daemon programs.

for file in `censored_ls libexec`
do
    compare_or_replace $EXE libexec/$file $DAEMON_DIRECTORY/$file || exit 1
    echo \$daemon_directory/$file:f:root::755 \
	>>$CONFIG_DIRECTORY/postfix-files || exit 1
done

# Install administrative commands.

for file in `censored_ls bin | grep '^post' | egrep -v '^post(drop|queue)$'`
do
    compare_or_replace $EXE bin/$file $COMMAND_DIRECTORY/$file || exit 1
    echo \$command_directory/$file:f:root::755 \
	>>$CONFIG_DIRECTORY/postfix-files || exit 1
done

# Don't set privilege bits when building a package for distribution
# to other systems.

if [ -n "$install_root" ]
then
    for file in postdrop postqueue
    do
	compare_or_replace $EXE bin/$file $COMMAND_DIRECTORY/$file || exit 1
	echo \$command_directory/$file:f:root:\$setgid_group:2755 \
	    >>$CONFIG_DIRECTORY/postfix-files || exit 1
    done
else
    for file in postdrop postqueue
    do
	compare_or_replace 2$EXE bin/$file $COMMAND_DIRECTORY/$file postdrop \
	    || exit 1
	echo \$command_directory/$file:f:root:\$setgid_group:2755 \
	    >>$CONFIG_DIRECTORY/postfix-files || exit 1
    done
fi

# Install the Sendmail-compatible user interface.

test -f bin/sendmail && {
    compare_or_replace $EXE bin/sendmail $SENDMAIL_PATH || exit 1
    compare_or_symlink $SENDMAIL_PATH $NEWALIASES_PATH
    compare_or_symlink $SENDMAIL_PATH $MAILQ_PATH
cat <<EOF >>$CONFIG_DIRECTORY/postfix-files || exit 1
\$sendmail_path:f:root::755
\$newaliases_path:f:root::755
\$mailq_path:f:root::755
EOF
}

# Preserve installed configuration files. Update scripts, license, samples.

if [ -f $CONFIG_DIRECTORY/main.cf ]
then
    for file in LICENSE `cd conf; censored_ls sample*` main.cf.default
    do
	compare_or_replace 644 conf/$file $CONFIG_DIRECTORY/$file || exit 1
    done
else
    for file in `censored_ls conf | egrep -v '^(postfix-script|post-install)$'`
    do
	compare_or_replace 644 conf/$file $CONFIG_DIRECTORY/$file || exit 1
    done
    test -z "$install_root" && need_config="create-missing first-install"
fi

for file in `censored_ls conf | egrep -v 'postfix-script|post-install'`
do
    echo \$config_directory/$file:f:root::644 \
	>>$CONFIG_DIRECTORY/postfix-files || exit 1
done

for file in postfix-script post-install
do
    compare_or_replace $EXE conf/$file $CONFIG_DIRECTORY/$file || exit 1
    echo \$config_directory/$file:f:root::755 \
	>>$CONFIG_DIRECTORY/postfix-files || exit 1
done

# Save settings.

bin/postconf -c $CONFIG_DIRECTORY -e \
    "daemon_directory = $daemon_directory" \
    "command_directory = $command_directory" \
    "queue_directory = $queue_directory" \
    "mail_owner = $mail_owner" \
    "setgid_group = $setgid_group" \
    "sendmail_path = $sendmail_path" \
    "mailq_path = $mailq_path" \
    "newaliases_path = $newaliases_path" \
    "manpage_path = $manpage_path" \
|| exit 1

# Install manual pages.

(cd man || exit 1
 for dir in man?
     do test -d $MANPAGE_PATH/$dir || mkdir -p $MANPAGE_PATH/$dir || exit 1
 done
 for file in `censored_ls man?/*`
 do
     compare_or_replace 644 $file $MANPAGE_PATH/$file || exit 1
     echo \$manpage_path/$file:f:root::644 \
	>>$CONFIG_DIRECTORY/postfix-files || exit 1
 done)

# If Postfix is being installed locally from source code, as opposed to
# being packaged for distribution to other systems, do the post-install
# processing now.

test -n "$install_root" && exit 0

export command_directory config_directory

${SHELL} conf/post-install ${need_config-"upgrade-source"}
