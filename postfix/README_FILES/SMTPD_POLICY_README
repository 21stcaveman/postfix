SMTPD POLICY DELEGATION PROTOCOL
================================

The Postfix SMTP server has a number of built-in mechanisms to
block or accept mail at the SMTP protocol stage. Optionally, it
can delegate policy decisions to an external server.

This document describes the following:

- The SMTPD policy delegation protocol.

- Using the example greylist policy server.

PROTOCOL DESCRIPTION
====================

The SMTPD policy delegation protocol is really simple. The client
request is a sequence of name=value attributes separated by newline,
and is terminated by an empty line.  Here is an example of all the
attributes that the Postfix SMTP server sends in a delegated policy
request:

    protocol_state=RCPT
    protocol_name=SMTP
    helo_name=some.domain.tld
    queue_id=8045F2AB23
    sender=foo@bar.tld
    recipient=bar@foo.tld
    client_address=1.2.3.4
    client_name=another.domain.tld
    [empty line]

The order of the attributes does not matter, and the server ignores
any attributes that it does not recognize. Protocol names are ESMTP
or SMTP; protocol states are CONNECT, EHLO, HELO, MAIL, RCPT, or
DATA. Other attributes speak for themselves. When the same attribute
name is sent more than once, the server may keep the first or the
last attribute value. An attribute name does not contain "=", null
or newline, and an attribute value does not contain null or newline.

The policy server replies in the same style, with any action that
is allowed in a Postfix SMTPD access table. Example:

    action=450 You are greylisted
    [empty line]

CLIENT SIDE CONFIGURATION
=========================

The SMTPD delegated policy client can connect to a TCP socket or
to a UNIX-domain socket. Examples:

    inet:localhost:9998
    unix:/some/where/policy
    unix:private/policy

The first example specifies that the policy server listens on
localhost port 9998. The second example specifies an absolute
pathname of a UNIX-domain socket. The third example specifies a
pathname relative to the Postfix queue directory; use this for
policy servers that are spawned by the Postfix master daemon.

To use the delegated policy service, specify "check_policy_service"
anywhere in the list of smtpd_recipient_restrictions:

/etc/postfix/main.cf:
    smtpd_recipient_restrictions =
	... 
	reject_unauth_destination 
	check_policy_service unix:private/policy 
	...

NOTE: specify "check_policy_service" AFTER "reject_unauth_destination"
or else your system could become an open relay.

EXAMPLE: GREYLIST POLICY SERVER
===============================

The file examples/smtpd-policy/smtpd-policy.pl in the Postfix source
tree implements an example greylist policy server. This server
stores a time stamp for every (client, sender, recipient) triple.
Mail is not accepted until a triple's time stamp is more than 3600
seconds old. This stops junk mail with random sender addresses,
and mail from randomly selected open proxies. It also stops junk
mail from spammers that change IP address frequently.

The example greylist policy server is a PERL script that runs under
control by the Postfix master daemon:

/etc/postfix/master.cf:
    policy  unix  -       n       n       -       -       spawn
      user=nobody argv=/usr/bin/perl /usr/libexec/postfix/smtpd-policy.pl

/etc/postfix/main.cf:
    smtpd_recipient_restrictions =
        permit_mynetworks
        reject_unauth_destination 
        check_policy_service unix:private/policy unix:private/policy
        ...

There are other delegated policy client configuration parameters
that control timeouts etc.  but you should never have to change
those.

In the smtpd-policy.pl PERL script you need to specify the location
of the greylist database file. DO NOT create the greylist database
in a world-writable directory such as /tmp or /var/tmp, and DO NOT
create the greylist database in a file system that can run out of
space easily. If the file becomes corrupted you will not be able
to receive mail until you delete the file by hand.

When the status file exceeds some reasonable size you can simply
delete the file without adverse effects. In the worst case, new
mail will be delayed by one hour. To lessen the impact, delete the
file in the middle of the night.

SAMPLE POLICY ROUTINE
=====================

This is the PERL subroutine that implements the example greylist policy.

#
# greylist status database and greylist time interval. DO NOT create the
# greylist status database in a world-writable directory such as /tmp
# or /var/tmp. DO NOT create the greylist database in a file system
# that can run out of space.
#
$database_name="/var/mta/smtpd-policy.db";
$greylist_delay=3600;

#
# Demo policy routine. The result is an action just like it would
# be specified on the right-hand side of a Postfix access table.
# Request attributes are passed in via the %attr hash.
#
sub policy {
    local(*attr) = @_;
    my($key, $time_stamp, $now);

    # Open the database on the fly.
    open_database() unless $database_obj;
    
    # Lookup the time stamp for this client/sender/recipient.
    $key = $attr{"client_address"}."/".$attr{"sender"}."/".$attr{"recipient"};
    $time_stamp = read_database($key); 
    $now = time();

    # If new request, add this client/sender/recipient to the database.
    if ($time_stamp == 0) {
        $time_stamp = $now;
        update_database($key, $time_stamp);
    }

    syslog $syslog_priority, "request age %d", $now - $time_stamp if $verbose;
    if ($time_stamp + $greylist_delay < $now) {
        return "ok";
    } else {
        return "450 request is greylisted";
    }
}
