This is a very first implementation of Postfix content inspection.
A Postfix content inspector causes "bad" mail to be bounced. All
other mail is delivered normally.  If you want content _inspection_,
which allows you to modify mail content or destination, see the
FILTER_README file instead.

Content inspection involves an incompatible change to queue file
formats.  Older Postfix versions will reject mail that needs to be
content inspected, and will move the queue file to the "corrupt"
mail queue subdirectory.

This document describes two approaches to content inspection.

Simple content inspection example
=================================

The example is relatively simple to set up, but is resource intensive
because it runs a shell script for each message.

With the shell script as shown you can lose a factor in Postfix
performance for each temporary file that is created and deleted in
the process of content inspection.  The performance impact is less
for mail that is submitted or delivered locally, because such
deliveries are not as fast as SMTP transit mail.

The example assumes that only mail received via SMTP needs to be
content inspected.

      ..................................
      .            Postfix             .
   ------smtpd \                /local-----
      .         -cleanup->queue-       .
   -----pickup /                \smtp------
      .                        |       .
      .                         \pipe------>inspector
      ..................................

Create a dedicated local user account called "inspect".  The user
will never log in, and can be given a "*" password and non-existent
shell and home.

Create a directory /var/spool/inspect that is accessible only to
the "inspect" user. This is where the content inspection software
will store any temporary files.

Define a content inspection entry in the Postfix master file:

    /etc/postfix/master.cf:
	inspect	  unix	-	n	n	-	-	pipe
	    user=inspect argv=/some/where/inspect ${sender} ${recipient}

The filter program can start out as a simple shell script like this:

    #!/bin/sh

    # Localize this
    INSPECT_DIR=/var/spool/inspect

    # Exit codes from <sysexits.h>
    EX_TEMPFAIL=75
    EX_UNAVAILABLE=69

    cd $INSPECT_DIR || { echo $INSPECT_DIR does not exist; exit $EX_TEMPFAIL; }

    # Clean up when done or when aborting.
    trap "rm -f in.$$; exit" 0 1 2 3 15

    cat >in.$$ || { echo Cannot save mail to file; exit $EX_TEMPFAIL; }

    # inspect <in.$$ || { echo Message content rejected; exit $EX_UNAVAILABLE; }

    exit 0

The idea is to first capture the message to file and then run the
content through run a third-party content inspection program.  If
the mail cannot be captured to file, mail delivery is deferred by
terminating with exit status 75 (EX_TEMPFAIL).  If the content
inspection program finds a problem, the mail is bounced by terminating
the shell script with exit status 69 (EX_UNAVAILABLE). An exit
status of zero means everything is hunky-dory and the mail can
be delivered to its recipients.

If mail is rejected, another possible action is to mail a copy to
the local postmaster. If you do that, be sure not to enable content
inspection for locally-posted mail or else rejected mail will loop.

The problem with content inspection sotware like this is that it is
not very robust, because the software does not talk a well-defined
protocol with Postfix. If the shell scripts aborts because the
shell runs into some memory allocation problem, the script will
not produce a nice exit status as per /usr/include/sysexits.h and
mail will probably bounce. The same lack of robustness is possible
when the content inspection software itself runs into a resource
problem.

I suggest that you play with this script for a while until you are
satisfied with the results. Run it as root or as the filter user,
with a real message (headers+body) as input:

    # /some/where/inspect sender recipient... <message-file

Turn on content inspection for mail arriving via SMTP only, by
appending "-o content_inspector=inspect:dummy" to the master.cf
entry that defines the Postfix SMTP server:

    /etc/postfix/master.cf:
	smtp      inet     ...stuff...      smtpd
	    -o content_inspector=inspect:dummy

The content_inspector configuration parameter accepts the same
syntax as the right-hand side in a Postfix transport table.

Advanced content inspection example
===================================

The second example is more complex, but can give better performance,
and is less likely to bounce mail when the machine runs into a
resource problem.  This approach uses content inspection software
that can receive mail via SMTP, and that can run as a resident
server.  You can expect to lose about a factor in Postfix performance
for every temporary file created.

We will set up a content inspection program listening on localhost
port 10025 that receives mail via the SMTP protocol.

      ..................................
      .            Postfix             .
   ------smtpd \                /local-----
      .         -cleanup->queue-       .
   -----pickup /            |   \smtp------
      .                     v          .
      .                    smtp        .
      .                     |          .
      ......................|...........
                            |
                            v
                .................
                .         10025 .
                .   inspection  .
                .               .
                .................

To enable content inspection in this manner, specify in main.cf a
new parameter:

    /etc/postfix/main.cf:
	content_filter = smtp:localhost:10025

This causes Postfix to add one extra content inspection record to
each incoming mail message, with content smtp:localhost:10025.
You can use the same syntax as in the right-hand side of a Postfix
transport table.  The content inspection records are added by the
smtpd and pickup servers.

When a queue file has content inspection information, the queue
manager will deliver the mail to the specified content inspector
before attempting final delivery.

The content filter can be set up with the Postfix spawn service,
which is the Postfix equivalent of inetd. For example, to instantiate
up to 10 content inspection processes on demand:

    /etc/postfix/master.cf:
	localhost:10025     inet  n      n      n      -      10     spawn
	    user=inspect argv=/some/where/inspect

"inspect" is a dedicated local user account.  The user will never
log in, and can be given a "*" password and non-existent shell and
home.

The spawn server is part of Postfix but is not installed by default.
Edit the top-level Makefile.in file, run "make makefiles", "make",
and "make install". The manual page isn't installed by default,
either. See the spawn.c source file.

The /some/where/inspect command is most likely a PERL script. PERL
has modules that make talking SMTP easy.

For now, it is left up to the Postfix users to come up with a
PERL/SMTP framework for Postfix content inspection. If done well,
it can be used with other mailers too, which is a nice spin-off.
