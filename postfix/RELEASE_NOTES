The stable Postfix release is called postfix-2.6.x where 2=major
release number, 6=minor release number, x=patchlevel.  The stable
release never changes except for patches that address bugs or
emergencies. Patches change the patchlevel and the release date.

New features are developed in snapshot releases. These are called
postfix-2.7-yyyymmdd where yyyymmdd is the release date (yyyy=year,
mm=month, dd=day).  Patches are never issued for snapshot releases;
instead, a new snapshot is released.

The mail_release_date configuration parameter (format: yyyymmdd)
specifies the release date of a stable release or snapshot release.

If you upgrade from Postfix 2.5 or earlier, read RELEASE_NOTES-2.6
before proceeding.

Incompatibility with snapshot 20090805
======================================

With some domain names, NS record lookups always fail while other
lookups always succeed (and often return NS records as additional
information).  This anomaly could be used by evil elements to skip
Postfix check_{client,helo,sender,recipient}_ns_access checks,
because those apply only domains with an NS record in the DNS.

To address this specific problem, the reject_unknown_helo_hostname,
reject_unknown_sender_domain and reject_unknown_recipient_domain
features now require that a domain name has NS records that resolve
to at least one IP address, and they now accept only MX records
that resolve to at least one IP address; those addresses may or may
not be "correct". Postfix has no code to determine whether the
SMTP client name has a resolvable NS or MX record.

Incompatibility with snapshot 20090606
======================================

The "postmulti -e destroy" command no longer attempts to remove
files that are created AFTER "postmulti -e create".  It still works
as expected immediately after creating an instance by mistake.
Trying to automatically remove other files is too risky because
Postfix-owned directories are by design not trusted.

Major changes with snapshot 20090606
====================================

Support for header checks on Milter-generated message headers.  This
can be used, for example, to control mail flow with Milter-generated
headers with indicators for badness or goodness. For details, see
the postconf(5) section for "milter_header_checks". Currently, all
header_checks features are implemented except PREPEND.
