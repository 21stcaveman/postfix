This is the Postfix 3.4 (experimental) release.

The stable Postfix release is called postfix-3.3.x where 3=major
release number, 3=minor release number, x=patchlevel.  The stable
release never changes except for patches that address bugs or
emergencies. Patches change the patchlevel and the release date.

New features are developed in snapshot releases. These are called
postfix-3.4-yyyymmdd where yyyymmdd is the release date (yyyy=year,
mm=month, dd=day).  Patches are never issued for snapshot releases;
instead, a new snapshot is released.

The mail_release_date configuration parameter (format: yyyymmdd)
specifies the release date of a stable release or snapshot release.

If you upgrade from Postfix 3.2 or earlier, read RELEASE_NOTES-3.3
before proceeding.

License change
---------------

This software is distributed with a dual license: in addition to the
historical IBM Public License 1.0, it is now also distributed with the
more recent Eclipse Public License 2.0. Recipients can choose to take
the software under the license of their choice. Those who are more
comfortable with the IPL can continue with that license.

Major changes with 20180823-nonprod
===================================

Postfix SMTP server support for RFC 3030 CHUNKING (the BDAT command)
without BINARYMIME, in both smtpd(8) and postscreen(8).

Impact on existing configurations:
----------------------------------

- There are no changes for smtpd_mumble_restrictions, smtpd_proxy_filter,
  smtpd_milters, or postscreen settings. Postfix automatically
  converts a sequence of BDAT commands into the DATA and end-of-data
  commands. For example, Postfix pretends that it receives (MAIL +
  RCPT + DATA + end-of-data) whether the client sends (MAIL + RCPT
  + BDAT + ...  + BDAT LAST) or (MAIL + RCPT + BDAT LAST).

- There are no changes in the Postfix queue file content, therefore
  no changes for after-queue content filters, and no changes in the
  envelope or message content that Milters will receive.

- However, Postfix will log BDAT-related failures as "xxx after
  BDAT" to avoid complicating troubleshooting.

Benefits of CHUNKING (BDAT) support without BINARYMIME:
-------------------------------------------------------

Support for CHUNKING (BDAT) was added to improve interoperability
with some clients, a benefit that would reportedly exist even without
Postfix support for BINARYMIME.

Postfix does not support BINARYMIME because:

- BINARYMIME support would require moderately invasive changes to
  support email content that is not line-oriented. With BINARYMIME
  the Content-Length: header specifies the length of arbitrary
  content that until now is base64-encoded, and formatted as lines
  of text.

- There is no conversion of BINARYMIME to a line-oriented 8BITMIME
  form that is compatible with legacy systems including UNIX mbox.
  The available options are to convert binary content into one of
  the 7bit forms (base64 or quoted-printable), or to return email
  as undeliverable. Any conversion would break digital signatures,
  so it would have to happen before signing.
  
Downsides of of CHUNKING (BDAT) support:
-----------------------------------------

The RFC 3030 authors did not specify any limitations on how clients
may pipeline commands (i.e. send commands without waiting for a
server response). If a server announces PIPELINING support, like
Postfix smtpd(8) does, then a remote SMTP client can pipeline all
commands folowing EHLO, for example, MAIL/RCPT/BDAT/BDAT/MAIL/RCPT/BDAT,
without ever having to wait for a server response. This means that
with BDAT, the Postfix SMTP server cannot distinguish between a
well-behaved client and a spambot, based on their command pipelining
behavior. If you require "reject_unauth_pipelining" to block spambots,
turn off the CHUNKING support announcement:

/etc/postfix/main.cf:
    # The logging alternative:
    smtp_discard_ehlo_keywords = chunking
    # The non-logging alternative:
    smtp_discard_ehlo_keywords = chunking, silent_discard

Be sure to specify '-o smtp_discard_ehlo_keywords=' in master.cf
for the submission and smtps services, in case you have clients
that benefit from CHUNKING support.

Incompatble change with snapshot 20180701
=========================================

To avoid performance loss under load, the tlsproxy(8) daemon now
requires a zero process limit in master.cf (this setting is provided
with the default master.cf file). As tlsproxy(8) processes become
too busy handling TLS connections, more processes will automatically
be added. By default, a tlsproxy(8) process will retire after several
hours.

To set the tlsproxy process limit to zero:

# postconf -F tlsproxy/unix/process_limit=0
# postfix reload

Major changes with snapshot 20180617
====================================

Preliminary Postfix SMTP client support for multiple deliveries per
TLS-encrypted connection. This is primarily to improve mail delivery
performance for destinations that throttle clients when they don't
combine deliveries.

This feature is enabled with "smtp_tls_connection_reuse=yes" in
main.cf, or with "tls_connection_reuse=yes" in smtp_tls_policy_maps.
It supports all Postfix TLS security levels including dane and
dane-only.

The implementation of TLS connection reuse relies on the same
scache(8) service as used for delivering plaintext SMTP mail, the
same tlsproxy(8) daemon as used by the postscreen(8) service for
inbound connections, and relies on the same hints from the qmgr(8)
daemon. It reuses the configuration parameters described in
CONNECTION_CACHE_README.

The following illustrates how TLS connections are reused:

    Initial plaintext SMTP handshake:
      smtp(8) -> remote SMTP server

    Reused SMTP/TLS connection, or new SMTP/TLS connection:
      smtp(8) -> tlsproxy(8) -> remote SMTP server

    Cached SMTP/TLS connection:
      scache(8) -> tlsproxy(8) -> remote SMTP server

There are a few refinements planned:

- Log the TLS properties every time a connection is reused.
  Currently, the properties are logged when a TLS session is created.
